/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/bullet.js":
/*!**********************************!*\
  !*** ./src/components/bullet.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Bullet\n/* harmony export */ });\n/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/constants */ \"./src/components/util/constants.js\");\n/* harmony import */ var _util_overlap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/overlap */ \"./src/components/util/overlap.js\");\n\n\n\nclass Bullet {\n    constructor(x, y, angle, dimensions) {\n        this.dimensions = dimensions;\n        this.angle = { x: Math.cos(angle), y: Math.sin(angle)};\n        this.posX = x + this.angle.x * 40;\n        this.posY = y + this.angle.y * 40;\n        this.explosion = document.getElementById('explosion');\n    }\n\n    animate(ctx, bullets, zombies) {\n        this.drawBullet(ctx);\n        this.update(bullets, zombies, ctx); //add zombies\n    }\n\n    drawBullet(ctx) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(this.posX, this.posY, _util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.RADIUS, 0, Math.PI * 2);\n        ctx.fillStyle = \"black\";\n        ctx.fill();\n        ctx.restore();\n    }\n\n    drawExplosion(ctx) {\n        const posX = this.posX - (_util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.RADIUS + 17);\n        const posY = this.posY - (_util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.RADIUS + 15);\n        ctx.drawImage(this.explosion, posX, posY, 30, 30);\n    }\n\n    bulletBounds(ctx) {\n        const midX = this.posX;\n        const midY = this.posY;\n        const radius = _util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.RADIUS;\n        return {\n            top: midY - radius, bottom: midY + radius,\n            left: midX - radius, right: midX + radius\n        }\n    }\n\n    outOfBounds() {\n        const radius = _util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.RADIUS;\n        const bullet = this.bulletBounds();\n        const outOfContainer = (this.posX > this.dimensions.width + radius ||\n            this.posY > this.dimensions.height + radius ||\n            this.posX < 0 - radius ||\n            this.posY < 0 - radius);\n        for (let i = 0; i < _util_constants__WEBPACK_IMPORTED_MODULE_0__.WALLS.length; i++) {\n            const wallRect = {};\n            const wall = _util_constants__WEBPACK_IMPORTED_MODULE_0__.WALLS[i];\n            wallRect.left = wall.posX;\n            wallRect.right = wall.posX + wall.width;\n            wallRect.top = wall.posY;\n            wallRect.bottom = wall.posY + wall.height;\n            if ((0,_util_overlap__WEBPACK_IMPORTED_MODULE_1__.overlap)(bullet, wallRect).type !== null) {\n                return true;\n            };\n        }\n        return outOfContainer;\n    }\n\n    hitZombie(zombies) {\n        const bullet = this.bulletBounds();\n        for (let i = 0; i < zombies.length; i++) {\n            const zombie = zombies[i];\n            const zombBound = zombie.zombieBounds();\n            if ((0,_util_overlap__WEBPACK_IMPORTED_MODULE_1__.overlap)(bullet, zombBound).type !== null) {\n                zombie.takeDamage(zombies);\n                return true;\n            };\n        }\n        return false;\n    }\n\n    update(bullets, zombies, ctx) {\n        const bulletIdx = bullets.indexOf(this);\n        if (this.hitZombie(zombies, ctx) || this.outOfBounds(ctx)) {\n            bullets = bullets.splice(bulletIdx, 1);\n            this.drawExplosion(ctx);\n            return;\n        }\n\n        \n        this.posX += this.angle.x * _util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.SPEED;\n        this.posY += this.angle.y * _util_constants__WEBPACK_IMPORTED_MODULE_0__.BULLET.SPEED;\n    }\n}\n\n//# sourceURL=webpack://JSproject/./src/components/bullet.js?");

/***/ }),

/***/ "./src/components/game.js":
/*!********************************!*\
  !*** ./src/components/game.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Game\n/* harmony export */ });\n/* harmony import */ var _level__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./level */ \"./src/components/level.js\");\n/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/constants */ \"./src/components/util/constants.js\");\n\n\n\n\nclass Game {\n    constructor(canvas){\n        this.canvasEl = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.dimensions = {width: canvas.width, height: canvas.height};\n        this.levelTitle = document.getElementById('level-title');\n        this.playerLives = document.getElementById('player-lives');\n        this.restartMenu = document.getElementsByClassName('modal')[0];\n        this.gameOverMsg = document.getElementById('game-over-p');\n        this.prevDelta = 0;\n    }\n\n    animate(curr){\n        if (this.running) {\n            requestAnimationFrame(this.animate.bind(this, Date.now()));\n        }\n\n        //Limiting max fps to 60 so that fps is consistent across monitors\n        let delta = curr - this.prevDelta;\n        if (delta < 1000 / _util_constants__WEBPACK_IMPORTED_MODULE_1__.FPS) {\n            return;\n        }\n        this.prevDelta = curr;\n\n        this.levelTitle.innerHTML = `Wave ${this.level.wave}`;\n        this.playerLives.innerHTML = `${this.level.lives}`;\n        this.level.animate();\n\n        if (this.level.gameOver()) {\n            this.running = false;\n            this.gameOverMenu();\n        }\n\n    }\n\n    gameOverMenu() {\n        this.gameOverMsg.innerHTML = `Game Over! Waves survived ${this.level.wave}`;\n        this.restartMenu.style.display = \"block\";\n    }\n\n    restart(){\n        this.running = false;\n        this.level = new _level__WEBPACK_IMPORTED_MODULE_0__.default(this.canvasEl, this.ctx, this.dimensions);\n        // this.animate();\n    }\n\n    play(){\n        this.running = true;\n        this.animate(Date.now());\n    }\n\n}\n\n//# sourceURL=webpack://JSproject/./src/components/game.js?");

/***/ }),

/***/ "./src/components/level.js":
/*!*********************************!*\
  !*** ./src/components/level.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Level\n/* harmony export */ });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/components/player.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"./src/components/map.js\");\n/* harmony import */ var _zombie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./zombie */ \"./src/components/zombie.js\");\n/* harmony import */ var _bullet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bullet */ \"./src/components/bullet.js\");\n/* harmony import */ var _util_mouse_pointer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/mouse_pointer */ \"./src/components/util/mouse_pointer.js\");\n/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/constants */ \"./src/components/util/constants.js\");\n\n\n\n\n\n\n\nclass Level {\n    constructor(canvas, ctx, dimensions){\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.dimensions = dimensions;\n        this.wave = 1;\n        this.totalZombies = this.wave * 2;\n        this.spawned = 0;\n        this.lives = 3\n        this.bullets = [];\n        this.zombies = [];\n\n        //start first level and begin listening\n        this.start();\n        this.moveListener();\n        this.lookListener();\n        this.bulletListener();\n    }\n\n    animate() {\n        this.levelOver();\n        this.map.animate(this.ctx);\n        this.player.animate(this.ctx);\n        this.bullets.forEach(bullet => {\n            bullet.animate(this.ctx, this.bullets, this.zombies)\n        });\n        this.zombies.forEach(zombie => {\n            zombie.animate(this.ctx);\n        })\n    }\n\n    gameOver() {\n        this.player.loseLife(this.zombies, this);\n        return this.lives === 0 ? true : false;\n    }\n\n    levelOver() {\n        if (this.player.kills === this.totalZombies) {\n            this.wave++;\n            this.totalZombies = this.wave * 2;\n            this.start();\n        }\n    }\n\n\n    start() {\n        this.map = new _map__WEBPACK_IMPORTED_MODULE_1__.default(this.dimensions);\n        this.player = new _player__WEBPACK_IMPORTED_MODULE_0__.default(this.dimensions);\n        this.spawned = 0;\n        this.spawnZombies();\n        this.animate();\n    }\n\n    spawnZombies() {\n        let spawn1 = setInterval(() => {\n            if (this.spawned === this.totalZombies) {\n                clearInterval(spawn1);\n            } else {\n                this.zombies.push(new _zombie__WEBPACK_IMPORTED_MODULE_2__.default(this.dimensions, this.player));\n                this.spawned++;\n            }\n        }, 1500)\n        let spawn2 = setInterval(() => {\n            if (this.spawned === this.totalZombies) {\n                clearInterval(spawn2);\n            } else {\n                this.zombies.push(new _zombie__WEBPACK_IMPORTED_MODULE_2__.default(this.dimensions, this.player));\n                this.spawned++;\n            }\n        }, 3000)\n    }\n\n    moveBinds(e) {\n        switch (e.keyCode) {\n            case 87: //w key\n                if (e.type === \"keydown\") {\n                    this.player.movement[\"wKey\"] = true;\n                } else {\n                    this.player.movement[\"wKey\"] = false;\n                }\n                break;\n            case 65: //a key\n                if (e.type === \"keydown\") {\n                    this.player.movement[\"aKey\"] = true;\n                } else {\n                    this.player.movement[\"aKey\"] = false;\n                }\n                break;\n            case 83: //s key\n                if (e.type === \"keydown\") {\n                    this.player.movement[\"sKey\"] = true;\n                } else {\n                    this.player.movement[\"sKey\"] = false;\n                }\n                break;\n            case 68: //d key\n                if (e.type === \"keydown\") {\n                    this.player.movement[\"dKey\"] = true;\n                } else {\n                    this.player.movement[\"dKey\"] = false;\n                }\n                break;\n        }\n    }\n\n    //event listeners\n    moveListener() {\n        const moveBound = this.moveBinds.bind(this);\n        document.addEventListener(\"keydown\", moveBound);\n        document.addEventListener(\"keyup\", moveBound);\n    }\n\n    lookListener() {\n        this.canvas.addEventListener(\"mousemove\", (e) => {\n            let dir = (0,_util_mouse_pointer__WEBPACK_IMPORTED_MODULE_4__.default)(this.canvas, e);\n            this.player.look(dir);\n        })\n    }\n\n    fireBullet() {\n        this.bullets.push(\n            new _bullet__WEBPACK_IMPORTED_MODULE_3__.default(this.player.playerPosX, this.player.playerPosY,\n                this.player.angle, this.dimensions)\n        )\n    }\n\n    gunSound() {\n        const sound = document.getElementById('gun-sound');\n        sound.play();\n    }\n\n    bulletListener() {\n        const fireBullet = this.fireBullet.bind(this);\n        const gunSound = this.gunSound.bind(this);\n        let reloading = false;\n        this.canvas.addEventListener(\"click\", () => {\n            if (reloading) {\n                return; //A click will do nothing\n            }\n            reloading = true;\n            fireBullet();\n            gunSound();\n            //Will set reloading to false after timeout\n            setTimeout(() => {reloading = false}, _util_constants__WEBPACK_IMPORTED_MODULE_5__.PLAYER.FIRE_RATE);\n        })\n    }\n}\n\n//# sourceURL=webpack://JSproject/./src/components/level.js?");

/***/ }),

/***/ "./src/components/map.js":
/*!*******************************!*\
  !*** ./src/components/map.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Map\n/* harmony export */ });\n/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/constants */ \"./src/components/util/constants.js\");\n\n\n\nclass Map {\n    constructor(dimensions){\n        this.dimensions = dimensions; //canvas dimensions\n        this.wallImg = document.getElementById('wall');\n        this.background = document.getElementById('background');\n        this.walls = _util_constants__WEBPACK_IMPORTED_MODULE_0__.WALLS;\n        \n    }\n\n    animate(ctx){\n        this.drawMap(ctx);\n        this.drawWalls(ctx);\n    }\n\n    drawMap(ctx){\n        ctx.drawImage(this.background, 0, 0,\n        this.dimensions.width, this.dimensions.height);    \n    }\n\n    drawWalls(ctx){\n        this.eachWall(wall => {\n            ctx.drawImage(this.wallImg, wall.posX,\n            wall.posY, wall.width, wall.height);\n        });\n    }\n\n    eachWall(cb){ //preserve my walls context\n        this.walls.forEach(cb.bind(this));\n    }\n}\n\n//# sourceURL=webpack://JSproject/./src/components/map.js?");

/***/ }),

/***/ "./src/components/player.js":
/*!**********************************!*\
  !*** ./src/components/player.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Player\n/* harmony export */ });\n/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/constants */ \"./src/components/util/constants.js\");\n/* harmony import */ var _util_overlap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/overlap */ \"./src/components/util/overlap.js\");\n\n\n\nclass Player {\n    constructor(dimensions){\n        this.dimensions = dimensions;\n        this.playerPosY = dimensions.height/2;\n        this.playerPosX = dimensions.width/8;\n        this.angle = Math.log(this.playerPosY,this.playerPosX);\n        this.movement = {wKey: false, aKey: false, sKey: false, dKey: false};\n        this.kills = 0;\n        this.gun = document.getElementById('pistol');\n        this.hat = document.getElementById('hat');\n        this.timeOfDamage = 0;\n    }\n\n    animate(ctx){\n        this.move();\n        this.collisionCheck();\n        this.drawPlayer(ctx);\n    }\n\n    drawPlayer(ctx){\n        const posX = this.playerPosX;\n        const posY = this.playerPosY\n\n        ctx.save();\n        \n        ctx.setTransform(1, 0, 0, 1, posX, posY);\n        ctx.rotate(this.angle);\n        \n        //main body\n        ctx.beginPath();\n        ctx.arc(0, 0, _util_constants__WEBPACK_IMPORTED_MODULE_0__.PLAYER.PLAYER_RADIUS, 0, 2 * Math.PI);\n        ctx.fillStyle = \"brown\";\n        ctx.fill();\n        ctx.stroke();\n        \n        //weapon\n        ctx.drawImage(this.gun, 5, - 3, 28, 19);\n\n        //accessory\n        ctx.drawImage(this.hat, -38, -42, 80, 55);\n        \n        ctx.restore();\n    }\n\n    loseLife(zombies, level){\n        const player = this.playerBounds();\n        for (let i = 0; i < zombies.length; i++) {\n            const zombie = zombies[i].zombieBounds();\n            const damageDelta = Date.now() - this.timeOfDamage > 1000;\n            if ((0,_util_overlap__WEBPACK_IMPORTED_MODULE_1__.overlap)(player, zombie).type !== null && damageDelta) {\n                level.lives--;\n                this.timeOfDamage = Date.now();\n                return;\n            }\n        }\n    }\n\n    playerBounds(){\n        const midX = this.playerPosX;\n        const midY = this.playerPosY;\n        const radius = _util_constants__WEBPACK_IMPORTED_MODULE_0__.PLAYER.PLAYER_RADIUS;\n        return {\n            top: midY - radius, bottom: midY + radius,\n            left: midX - radius, right: midX + radius \n        }\n    }\n\n    collisionCheck() {\n        const pBound = this.playerBounds();\n\n        _util_constants__WEBPACK_IMPORTED_MODULE_0__.WALLS.forEach(wall => {\n            const wallRect = {};\n            wallRect.left = wall.posX;\n            wallRect.right = wall.posX + wall.width;\n            wallRect.top = wall.posY;\n            wallRect.bottom = wall.posY + wall.height;\n\n            const radius = _util_constants__WEBPACK_IMPORTED_MODULE_0__.PLAYER.PLAYER_RADIUS;\n            const collision = (0,_util_overlap__WEBPACK_IMPORTED_MODULE_1__.overlap)(pBound, wallRect);\n\n            switch (collision.type) {\n                case \"rightBot\":\n                    if (pBound.right > wallRect.left + 5) {\n                        //Five is added to wallRect to adjust for animation time\n                        this.playerPosY = collision.bot - radius;\n                    } else {\n                        this.playerPosX = collision.right - radius;\n                    }\n                    break;\n                case \"leftBot\":\n                    if (pBound.left < wallRect.right - 5) {\n                        this.playerPosY = collision.bot - radius;\n                    } else {\n                        this.playerPosX = collision.left + radius;\n                    }\n                    break;\n                case \"rightTop\":\n                    if (pBound.right > wallRect.left + 5) {\n                        this.playerPosY = collision.top + radius;\n                    } else {\n                        this.playerPosX = collision.right - radius;\n                    }\n                    break;\n                case \"leftTop\":\n                    if (pBound.left < wallRect.right - 5) {\n                        this.playerPosY = collision.top + radius;\n                    } else {\n                        this.playerPosX = collision.left + radius;\n                    }\n                    break;\n            }\n        })\n    }\n\n    look(dir) {\n        // This method takes in xy of mouse pos to return angle\n        //x,y relative to players position\n        let dy = dir.y - this.playerPosY;\n        let dx = dir.x - this.playerPosX;\n        this.angle = Math.atan2(dy, dx);\n    }\n\n    move(){\n        let move = this.movement;\n        const speed = _util_constants__WEBPACK_IMPORTED_MODULE_0__.PLAYER.PLAYER_SPEED;\n        const radius = _util_constants__WEBPACK_IMPORTED_MODULE_0__.PLAYER.PLAYER_RADIUS;\n        const height = this.dimensions.height;\n        const width = this.dimensions.width;\n\n        //boundary checks\n        //non boolean checks\n        const upBound = this.playerPosY - speed - radius;\n        const lowBound = this.playerPosY + speed + radius;\n        const leftBound = this.playerPosX - speed - radius;\n        const rightBound = this.playerPosX + speed + radius;\n\n        //boolean checks\n        const upLeftBound = upBound + 0.5 * speed > 0 &&\n                            leftBound - 0.5 * speed > 0;\n        const upRightBound = upBound + 0.5 * speed > 0 &&\n                            rightBound - 0.5 * speed < width;\n        const lowLeftBound = lowBound - 0.5 * speed < height &&\n                            leftBound - 0.5 * speed > 0;\n        const lowRightBound = lowBound - 0.5 * speed < height &&\n                            rightBound - 0.5 * speed < width;\n\n        if (move[\"wKey\"] && move[\"aKey\"]) {\n            if (upLeftBound) {\n                this.playerPosX -= 0.5 * speed;\n                this.playerPosY -= 0.5 * speed;\n            }\n        } else if (move[\"wKey\"] && move[\"dKey\"]) {\n            if (upRightBound) {\n                this.playerPosX += 0.5 * speed;\n                this.playerPosY -= 0.5 * speed;\n            }\n        } else if (move[\"sKey\"] && move[\"aKey\"]) {\n            if (lowLeftBound) {\n                this.playerPosX -= 0.5 * speed;;\n                this.playerPosY += 0.5 * speed;\n            }\n        } else if (move[\"sKey\"] && move[\"dKey\"]) {\n            if (lowRightBound) {\n                this.playerPosX += 0.5 * speed;\n                this.playerPosY += 0.5 * speed;\n            }\n        } else if (move[\"wKey\"]) {\n            if (upBound > 0) this.playerPosY -= speed;\n        } else if (move[\"sKey\"]) {\n            if (lowBound < height) this.playerPosY += speed;\n        } else if (move[\"aKey\"]) {\n            if (leftBound > 0) this.playerPosX -= speed;\n        } else if (move[\"dKey\"]) {\n            if (rightBound < width) this.playerPosX += speed;\n        }\n    }\n\n}\n\n//# sourceURL=webpack://JSproject/./src/components/player.js?");

/***/ }),

/***/ "./src/components/util/constants.js":
/*!******************************************!*\
  !*** ./src/components/util/constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WALLS\": () => /* binding */ WALLS,\n/* harmony export */   \"PLAYER\": () => /* binding */ PLAYER,\n/* harmony export */   \"ZOMBIE\": () => /* binding */ ZOMBIE,\n/* harmony export */   \"BULLET\": () => /* binding */ BULLET,\n/* harmony export */   \"FPS\": () => /* binding */ FPS\n/* harmony export */ });\nconst WALLS = [\n    { posX: 630, posY: 340, width: 120, height: 160 },\n    { posX: 630, posY: 60, width: 120, height: 160 },\n    { posX: 430, posY: 0, width: 120, height: 160 },\n    { posX: 430, posY: 440, width: 120, height: 160 },\n    { posX: 320, posY: 230, width: 120, height: 115 },\n    { posX: 115, posY: 80, width: 120, height: 130 },\n    { posX: 115, posY: 380, width: 120, height: 130 }\n]\n\nconst PLAYER = {\n    PLAYER_SPEED: 3.5,\n    PLAYER_RADIUS: 14,\n    FIRE_RATE: 675 //ms between firing\n}\n\nconst ZOMBIE = {\n    ZOMB_SPEED: 1.75,\n    ZOMB_HEALTH: 3,\n    RADIUS: 14\n}\n\nconst BULLET = {\n    RADIUS: 3,\n    SPEED: 5.5\n}\n\nconst FPS = 60;\n\n//# sourceURL=webpack://JSproject/./src/components/util/constants.js?");

/***/ }),

/***/ "./src/components/util/mouse_pointer.js":
/*!**********************************************!*\
  !*** ./src/components/util/mouse_pointer.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nconst mousePointer = (ctx, e) => {\n    const rect = ctx.getBoundingClientRect();\n\n    //x y coord reference to the canvas size\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    return {x, y}\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mousePointer);\n\n//# sourceURL=webpack://JSproject/./src/components/util/mouse_pointer.js?");

/***/ }),

/***/ "./src/components/util/overlap.js":
/*!****************************************!*\
  !*** ./src/components/util/overlap.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"overlap\": () => /* binding */ overlap\n/* harmony export */ });\nconst overlap = (rect1, rect2) => {\n    const rightCheck = (rect1.right < rect2.right && rect1.right > rect2.left);\n    const topCheck = (rect1.top < rect2.bottom && rect1.top > rect2.top);\n    const botCheck = (rect1.bottom < rect2.bottom && rect1.bottom > rect2.top);\n    const leftCheck = (rect1.left < rect2.right && rect1.left > rect2.left);\n\n    let collision = { type: null }\n\n    if (rightCheck && botCheck) {\n        collision.type = \"rightBot\";\n        collision.right = rect2.left;\n        collision.bot = rect2.top;\n        return collision;\n    } else if (rightCheck && topCheck) {\n        collision.type = \"rightTop\";\n        collision.right = rect2.left;\n        collision.top = rect2.bottom;\n        return collision;\n    } else if (leftCheck && topCheck) {\n        collision.type = \"leftTop\";\n        collision.left = rect2.right;\n        collision.top = rect2.bottom;\n        return collision;\n    } else if (leftCheck && botCheck) {\n        collision.type = \"leftBot\";\n        collision.left = rect2.right;\n        collision.bot = rect2.top;\n        return collision;\n    }\n    \n    return collision;\n};\n\n//# sourceURL=webpack://JSproject/./src/components/util/overlap.js?");

/***/ }),

/***/ "./src/components/zombie.js":
/*!**********************************!*\
  !*** ./src/components/zombie.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Zombie\n/* harmony export */ });\n/* harmony import */ var _util_overlap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/overlap */ \"./src/components/util/overlap.js\");\n/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/constants */ \"./src/components/util/constants.js\");\n\n\n\nclass Zombie {\n    constructor(dimensions, player){\n        this.player = player;\n        this.dimensions = dimensions;\n        this.posX = dimensions.width - 20;\n        this.posY = Math.random() * (dimensions.height - 20) + 10;\n        this.rotate(player);\n        this.health = _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.ZOMB_HEALTH;\n        this.color = { 3: \"#0E9C03\", 2: \"#8BE402\", 1: \"#CDDE09\"};\n    }\n\n    animate(ctx) {\n        this.moveZombie(this.player);\n        this.collisionCheck(this.player);\n        this.drawZombie(ctx);\n    }\n\n    takeDamage(zombies) {\n        this.health--;\n        if (this.health === 0) {\n            const idx = zombies.indexOf(this);\n            zombies = zombies.splice(idx, 1);\n            this.player.kills++;\n        }\n    }\n\n    drawZombie(ctx) {\n        ctx.save();\n        const posX = this.posX;\n        const posY = this.posY;\n        const color = this.color[this.health];\n        //Transform is moving the canvas to pos\n        //thus everything following is drawn at 0 0\n        ctx.setTransform(1, 0, 0, 1, posX, posY)\n        ctx.rotate(this.angle);\n\n        ctx.beginPath();\n        ctx.fillStyle = color;\n        ctx.strokeStyle = color\n        ctx.arc(0, 0, _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke()\n\n        // Hands\n        ctx.beginPath();\n        ctx.strokeStyle = color\n        ctx.lineCap = \"round\"\n        ctx.lineWidth = 4\n        ctx.moveTo(0, 0 + _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS)\n        ctx.lineTo(20, 10)\n        ctx.stroke()\n\n        ctx.beginPath();\n        ctx.strokeStyle = color\n        ctx.lineCap = \"round\"\n        ctx.lineWidth = 4\n        ctx.moveTo(0, 0 - _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS)\n        ctx.lineTo(20, -10)\n        ctx.stroke()\n\n        ctx.restore()\n    }\n\n    rotate(player) {\n        const dy = player.playerPosY - this.posY;\n        const dx = player.playerPosX - this.posX;\n        this.angle = Math.atan2(dy, dx);\n    }\n\n    moveZombie(player) {\n        this.rotate(player);\n        const speed = _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.ZOMB_SPEED;\n        //boundary checks\n        const position = this.posY + Math.sin(this.angle) * speed;\n        const upBound = position - _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS > 0;\n        const lowBound = position + _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS < this.dimensions.height;\n        \n        this.posX += Math.cos(this.angle) * speed;        \n        if (upBound && lowBound) {\n            this.posY += Math.sin(this.angle) * speed;\n        }\n\n    }\n\n    zombieBounds() {\n        const midX = this.posX;\n        const midY = this.posY;\n        const radius = _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS;\n        return {\n            top: midY - radius, bottom: midY + radius,\n            left: midX - radius, right: midX + radius\n        }\n    }\n\n    collisionCheck(player) {\n        const zBound = this.zombieBounds();\n        const dim = this.dimensions;\n        const radius = _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.RADIUS;\n        const speed = _util_constants__WEBPACK_IMPORTED_MODULE_1__.ZOMBIE.ZOMB_SPEED * 0.78;\n\n        _util_constants__WEBPACK_IMPORTED_MODULE_1__.WALLS.forEach(wall => {\n            const wallRect = {};\n            wallRect.left = wall.posX;\n            wallRect.right = wall.posX + wall.width;\n            wallRect.top = wall.posY;\n            wallRect.bottom = wall.posY + wall.height;\n            \n            const playerLeft = player.playerPosX < wallRect.right - wall.width/2;\n            const playerAbove = player.playerPosY < wallRect.bottom - wall.height/2;\n            const edgeWall = wallRect.top === 0 || wallRect.bottom === dim.height;\n\n            const collision = (0,_util_overlap__WEBPACK_IMPORTED_MODULE_0__.overlap)(zBound, wallRect); //returns an object\n            //think about spliting logic? this.colliding = true?\n            switch (collision.type) {\n                case \"rightBot\":\n                    if (zBound.right > wallRect.left + 2) {\n                        //Two is added to wallRect to adjust for animation time\n                        this.posY = collision.bot - radius;\n                        playerLeft ? (this.posX -= speed) : (this.posX += speed);\n                    } else {\n                        this.posX = collision.right - radius;\n                        if (edgeWall) {\n                            wallRect.top === 0 ? (this.posY += speed) : (this.posY -= speed);\n                        } else {\n                            playerAbove ? (this.posY -= speed) : (this.posY += speed);\n                        }\n                    }\n                    break;\n                case \"leftBot\":\n                    if (zBound.left < wallRect.right - 2) {\n                        this.posY = collision.bot - radius;\n                        playerLeft ? (this.posX -= speed) : (this.posX += speed);\n                    } else {\n                        this.posX = collision.left + radius;\n                        if (edgeWall) {\n                            wallRect.top === 0 ? (this.posY += speed) : (this.posY -= speed);\n                        } else {\n                            playerAbove ? (this.posY -= speed) : (this.posY += speed);\n                        }\n                    }\n                    break;\n                case \"rightTop\":\n                    if (zBound.right > wallRect.left + 2) {\n                        this.posY = collision.top + radius;\n                        playerLeft ? (this.posX -= speed) : (this.posX += speed);\n                    } else {\n                        this.posX = collision.right - radius;\n                        if (edgeWall) {\n                            wallRect.top === 0 ? (this.posY += speed) : (this.posY -= speed);\n                        } else {\n                            playerAbove ? (this.posY -= speed) : (this.posY += speed);\n                        }\n                    }\n                    break;\n                case \"leftTop\":\n                    if (zBound.left < wallRect.right - 2) {\n                        this.posY = collision.top + radius;\n                        playerLeft ? (this.posX -= speed) : (this.posX += speed);\n                    } else {\n                        this.posX = collision.left + radius;\n                        if (edgeWall) {\n                            wallRect.top === 0 ? (this.posY += speed) : (this.posY -= speed);\n                        } else {\n                            playerAbove ? (this.posY -= speed) : (this.posY += speed);\n                        }\n                    }\n                    break;\n            }\n        })\n    }\n}\n\n//# sourceURL=webpack://JSproject/./src/components/zombie.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/game */ \"./src/components/game.js\");\n\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById('zombo-game');\n    const game = new _components_game__WEBPACK_IMPORTED_MODULE_0__.default(canvas);\n\n    //page elements\n    const playButton = document.getElementById('play-button');\n    const splashPage = document.getElementsByClassName('splash-page')[0];\n    const gameContainer = document.getElementsByClassName('game-container')[0];\n    const controlsButton = document.getElementById('controls-button');\n    const controlsPage = document.getElementsByClassName('controls-page')[0];\n    const backButton = document.getElementById('back-arrow');\n    const backgroundMusic = document.getElementById('song');\n    const gunSound = document.getElementById('gun-sound');\n    const audioButton = document.getElementById('audio-button');\n    const volumeControl = document.getElementById('volume-control');\n    const playAgain = document.getElementById('play-again-button');\n    const restartMenu = document.getElementsByClassName('modal')[0];\n    const homeButton = document.getElementById('home-button');\n\n    //text to add glow affect\n    const welcomeMsg = document.getElementById('welcome-message');\n    const controlsH = document.getElementById('controls-h');\n    const levelTitle = document.getElementById('level-title');\n    const livesTitle = document.getElementById('lives-title');\n\n    const glow = () => {\n        let i = 0;\n        let goingUp = true;\n\n        const setGlow = (size) => {\n            welcomeMsg.style.textShadow = `0 0 ${size}px #0E9C03`;\n            controlsH.style.textShadow = `0 0 ${size}px #0E9C03`;\n            levelTitle.style.textShadow = `0 0 ${size}px #0E9C03`;\n            livesTitle.style.textShadow = `0 0 ${size}px #0E9C03`;\n        }\n\n        setInterval(()=> {\n            goingUp ? i++ : i--;\n            if (i > 20) {\n                goingUp = false;\n            } else if (i === 0) {\n                goingUp = true;\n            }\n            setGlow(i);\n        }, 150)\n    }\n\n    glow();\n\n    playButton.addEventListener(\"click\", () => {\n        splashPage.classList.add('hidden');\n        gameContainer.classList.remove('hidden');\n\n        //Setting background music to a reasonable starting level\n        volumeControl.value = 25;\n        backgroundMusic.volume = 0.25;\n        backgroundMusic.play();\n\n        //begin the game\n        game.restart();\n        game.play();\n    })\n\n    controlsButton.addEventListener(\"click\", () => {\n        splashPage.classList.add(\"hidden\");\n        controlsPage.classList.remove(\"hidden\");\n    })\n\n    backButton.addEventListener(\"click\", () => {\n        controlsPage.classList.add(\"hidden\");\n        splashPage.classList.remove(\"hidden\");\n    })\n\n    audioButton.addEventListener(\"click\", () => {\n        if (backgroundMusic.muted) {\n            backgroundMusic.muted = false;\n            gunSound.muted = false;\n            audioButton.classList.remove(\"muted\");\n        } else {\n            backgroundMusic.muted = true;\n            gunSound.muted = true;\n            audioButton.classList.add(\"muted\");\n        }\n    })\n\n    volumeControl.addEventListener(\"change\", (e) => {\n        backgroundMusic.volume = e.currentTarget.value / 100;\n    })\n\n    playAgain.addEventListener(\"click\", () => {\n        restartMenu.style.display = \"none\";\n        game.restart();\n        game.play();\n    })\n\n    homeButton.addEventListener(\"click\", () => {\n        restartMenu.style.display = \"none\";\n        gameContainer.classList.add(\"hidden\");\n        splashPage.classList.remove(\"hidden\");\n    })\n})\n\n//# sourceURL=webpack://JSproject/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;